#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to find gcd of two numbers
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to find modular inverse of e under modulo phi
int modInverse(int e, int phi) {
    int t = 0, newt = 1;
    int r = phi, newr = e;
    int quotient, temp;
    
    while (newr != 0) {
        quotient = r / newr;
        
        temp = t;
        t = newt;
        newt = temp - quotient * newt;
        
        temp = r;
        r = newr;
        newr = temp - quotient * newr;
    }
    
    if (r > 1) return -1; // e is not invertible
    if (t < 0) t += phi;
    
    return t;
}

// Function to perform modular exponentiation
long long modExp(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod;
    
    while (exp > 0) {
        if (exp % 2 == 1) // If exp is odd, multiply base with the result
            result = (result * base) % mod;
        exp = exp >> 1;   // exp = exp / 2
        base = (base * base) % mod; // base = base^2
    }
    
    return result;
}

int main() {
    // Step 1: Generate two large prime numbers (p and q)
    int p = 61; // example prime number
    int q = 53; // example prime number
    
    // Step 2: Compute n = p * q
    int n = p * q;
    
    // Step 3: Compute Euler's totient function phi(n) = (p-1) * (q-1)
    int phi = (p - 1) * (q - 1);
    
    // Step 4: Choose an integer e such that 1 < e < phi(n) and gcd(e, phi(n)) = 1
    int e = 17; // example public exponent
    
    // Step 5: Compute d such that d * e = 1 (mod phi(n))
    int d = modInverse(e, phi);
    
    if (d == -1) {
        printf("No modular inverse found for e = %d and phi = %d\n", e, phi);
        return -1;
    }
    
    printf("Public Key: (n = %d, e = %d)\n", n, e);
    printf("Private Key: (n = %d, d = %d)\n", n, d);
    
    // Step 6: Encryption - Convert the plaintext message into an integer m
    int plaintext = 65; // example plaintext message (A)
    long long ciphertext = modExp(plaintext, e, n);
    printf("Encrypted message: %lld\n", ciphertext);
    
    // Step 7: Decryption - Convert the ciphertext back to plaintext message
    long long decryptedtext = modExp(ciphertext, d, n);
    printf("Decrypted message: %lld\n", decryptedtext);
    
    return 0;
}
